Al comparar por null hacer obj directamente, mas rapido que las alternativas. https://stackoverflow.com/questions/1972266/obj-nil-vs-obj-nil/37287459

Nil es un singleton??

Indexar array fuera de range devuelve nil.

Shift y unshift son analogos a push y pop, pero para el comienzo.

Parallel assignment es cool. Splat operator (*) para lo q sobra.

En un hash [] devuelve nil si no lo encuentra, fetch levanta KeyError, y se le puede pasar un valor por defecto o bloque a la fetch(key_name) { |key| "default" }.

Mergear hashes sobreescribe los valores repetidos.

Si se usa un valor por defecto en un hash, va a ser siempre el mismo objeto, no una copia.

Podes usar single quotes para string con double quotes y viceversa. Si no la clasica, escape sequence con \. Tambien podes usar de delimitador cualquier caracter
no alfa numerico precedido de %.

Las flexible quotes sirven para multiline strings.

Usando <<IDENTIFIER <CONTENT> IDENTIFIER se puede crear un heredoc.

<< concatena in place, += es un assignment asi q hace una copia. Es significativamente mas rapido tmb.

Strings con "" tienen escape characters, con '' no.

Strings se pueden splitear, si no se especifica nada, se divide por whitespaces. Y se pueden joinear.

== es comparacion estandar, equal? pregunta si se refieren al mismo objeto, eql? es basicamente == pero en Numeric no hace type conversion, etc...

Regex:
    + es 1 o mas
    * cero o mas
    [] para definir opciones (clase de caracteres)
        - define un rango
        ^ niega
    \d digitos
    \w palabra
    Las abreviaciones de clases de caracteres se niegan con mayusculas
    . cualquier cosa menos \n
    \A fija al comienzo de la secuencia
    \z fija al final de la secuencia
    ^ fija al comienzo de linea
    $ fija al final de linea
    \b fija al limite de una palabra
    () agrupan cosas
    | es or

scan para todas las ocurrencias, sub para find and replace, gsub para find and replace all
